/*============================================================================
 Name        : Bash commands.txt
 Author      : Daniel Silbermann, s090116, Declined#8151 (Discord ID) 
 Version     : 2.7
 Date        : 29/09-20
 Last Updated: 02/08-21
 Copyright   : Do not alter, copy or share this file without permission
 Description : A rough guide for new users to understand bash console commmands
             : Made for course 62588 Operating systems at DTU Denmark Fall 2020.
             : To be used by the teacher at his discretion.
             : Teacher Bhupjit Singh - bhsi@dtu.dk
 ============================================================================*/
Sections:
    - Introduction
    - General tips
    - General info
    - Elevated priveledge
    - System Commands
      - Permission explanation
      - Process details
    - System/User Info
    - Directory commands
    - Help section
    - File access, edit, format
    - Networking
    - VARIABLES
    - FUNCTIONS-(NOT COMMANDS)
    - Command line shortcuts
    - Hardware
    - VIM tutorial
    - Uncategorized
    - Sources

------------------------------------------------
|                 Introduction                 |
------------------------------------------------
Linux is incredibly powerful for managing and
setting up servers.

The term 'distro' refers to distribution types.
Distributions are organized based on the 
"Package management system".
There are two primary distribution types
RPM-based, and DEB-based.
RPM uses the .rpm file format, most known distros
are: Red Hat Linux, CentOS, Fedora
DEB emphasizes 'free software' often referred
to as 'debian type'
Most known distros are: Ubuntu, Linux Mint, 
Linux Kali.

Because of this distinction, and modular setup,
Some commands may not be natively installed on 
a distro, which means you have to install them
yourself, or the version of a command you have
might work slightly differently in your distro
compared to another.

Examples of server types and tools
Apache                                          : Web server
SAMBA                                           : A tool with multiple server and management option for Linux and Unix
                                                  It allows windows to share files and printers on the Unix host
                                                  It also allows Unix users to access resources shared by Windows systems.
Oracle, MySQL (MariaDB), Mongodb, etc.          : Database

Additional server types.
Mail/FTP/DNS/router/firewall and more           

This document is designed to give you an
introduction to what Linux is, and to become
familiar with the command console.

------------------------------------------------
|                 General info                 |
------------------------------------------------
Information about the format of this document

'$ ' is used to emulate a command line,
specifically intended for examples of full
commands.
Notice that '$STUFF' refers to variables.

From this point forward, this format will
primarily be used, with commands to the left,
and a description to the right.
Commands                                         Description
------------------------------------------------|---------------
This will be the max width of this file---------------------------------------------------------------------------------------->|
: Explanation of command
- Command options
[empty] is a pseudonym for not entering anything.
[command] refers to commands themselves
[operator] refers to '-operator' options.

------------------------------------------------
|                 General tips                 |
------------------------------------------------
Navigate to folder, then type 'bash'            : Open a terminal, which has already navigated to folder
in the address field.                             Requires that Linux subsystem for Windows is activated
                                                  and that a linux distribution is virtually installed
                                                  i.e. Microsoft store, Ubuntu (LTS version, which stands
                                                  for 'Long Term Support')

cd                                              : Change Directory, '..' to move up a directory
                                                  When inside a directory and you've typed part of the name
                                                  of a file. hit 'tab' to auto fill out the content.
                                                  Double hit 'tab' to see a list of directories.
                                                  Use '$ cd -' to go back to the directory you were just in
                                                  Use '$ cd /' to go to root directory
                                                  Use '$ cd ~' to go to HOME directory
pwd                                             : Print Working directory

something '>>' filename                         : Append content to file named filename
something '>' filename                          : Overwrite content of file named filename
                                                  This is a great option for pasting output into log files,
                                                  when writing and testing C-programs

(if intalled)Type 'code .' to open Visual Studio
Code with that folder already being navigated to.

To compile and run C code files
$ gcc -o newfilename someCcodefile.c            : Will compile the file, and save the compiled version in 'newfilename'
$ ./newfilename                                 : Executes the compiled file.

Update/upgrade dependencies and installed
content (use sudo)
$ sudo apt-get update                           : debian based distros
$ sudo apt-get upgrade                          : debian based distros
$ sudo apt-get build-essential                  : debian based distros
$ yum                                           : (For RPM distros) Install, Uninstall, Update Packages 

After writing a command, you sometimes write '-'
and then add an operator, such as
$ ls -l -a
This is equivalent to 
$ ls -la
Because using a single '-' means that each 
character is treated as a separate operator.
If you use '--' the whole word is supplied
as an argument.
$ ls --help

To terminate access, or close the console, 
use the command 'exit'
$ exit        

If the commands are exceedingly long, use '\' as
a method to break the line, and continue writing
a command on  the following line.

The 'grep' command print lines that match
patterns.
[Example]
$ top | grep root                               : Will present the processes related to root.

If you screw up somehow, terminate an active
process with [CTRL + C], i.e. 'htop' or an
infinitely running program.

------------------------------------------------
|              Elevated privilege              |
------------------------------------------------
For some commands, you require root access,
this section explains how to acquire that.

The prompt symbol for regular users is dolla
sign ($), the prompt symbol for superuser
is hashtag (#), use this as an indicator
to see if you've got root access.

sudo                                            : Execute a command as another user
                                                  Super user access (creates a timer in the background,
                                                  before requiring a password again)
        --help                                  - See a list of options, and their uses
visudo                                          : visudo edits the sudoers file, which defines the users and groups with
                                                  administrator rights.
updatedb                                        - Creates or updates a database used by 'locate(1)'
sudos                                           : Super user access, for extended periods, (generally
                                                  not a good idea unless you know what you're doing)
        -s                                     - Disable the timer, and continue on as the super user
                                                  (WARNING, DON'T FORGET to log out)
        exit                                    - Will terminate the super user access
su                                              : Switch user
        [empty]                                 - Changing to root access ()
        - [empty]                               - Changing to root user, but remains in the current users home directory
        - [Username]                            - will change to other specified user on the username.
        [username]                              - Will switch to other user, but remain in your own home directory

------------------------------------------------
|                System Commands               |
------------------------------------------------
chmod                                           : Change file mode bits. Permission for files and directories,
                                                  look at the next section for details regarding bit setup.
        +r [Filename]                           - Makes the file readable
        +w [Filename]                           - Makes the file writeable
        +x [Filename]                           - Makes the file executable

[EXAMPLE section]
$ chmod 600 [filename]                          : Where 6 is the user, 0 is group, 0 is everyone
$ chmod 755 [directory]                         : 755 is recommended for directories
$ chmod 744 [filename]                          : 644 is recommended for files. 

echo <text>                                     : Prints echoes the <print> in the console
                                                  Has lots of uses, example printing the content of
                                                  a system variable .
[Examples]
$ echo $PATH                                    : Prints the entire path variable
$ echo $PS1                                     : Prints the entire PS1 settings variable, for
                                                  how to display your prompt
killall                                         : Kill all processes that you have access to,
                                                  use with care, as you may terminate more processes
                                                  than you intended
        [a-zA_Z]                                - terminates any process related to that name
kill                                            : By default, send a SIGKILL signal to a process
       -[SIGNAL]                                - Optional. Use signal number or signal name, to
                                                  send a specific signal
-       [PID/%JOB_SPEC]                         - Which process to kill, JOB_SPEC is for background
                                                  processes, so you need to look up the PID.
nice                                            : Run a program with modified scheduling priority
                                                  Used for determining the 'nice' value upon process creation
renice                                          : Alter the priority of running processes

gcc                                             : Compile program from c language
        -o                                      : Output, next argument will be the created filename
[Examples]
$ gcc -o [newname] [c-file] 
$ gcc -o derp /test_folder/test.c               : Here we navigate into a folder to find the test.c file,
                                                  the 'derp' file, is placed in the current folder

df [option] [file]                              : Something about 'report file system disk space usage'
        -h                                      - Human readable
        -H                                      - Print sizes in powers of 1000 (e.g., 1.1G)

ps                                              : Processor Status, it is a highly integrated part of Linux.
                                                  There are more than 80 options, most commonly used is 'aux'
        aux                                     : Display processes of all users.
        -o                                      : User defined format       
        -e                                      : Select all processes, identical to -A
        
[Example]
$ ps aux                                        : See all running processes
$ ps -eo pid,user,uid,gid,vsz,rss,comm --sort=-vsz
                                                : Showing the selected categories, sorted descending by vsz
$ ps -eo pid,user,vsz,rss,comm --sort=rss       : Showing the selected categories, sorted ascending by rss

ip [option]                                     : 
        addr

whois                                           : shows some whois data about a website or ip
        [ip or website]
        | more/less                             - Displayed using the more or less format

pstree                                          : Display a tree of process

alias                                           : Access to aliases
[Example]
$alias                                          : Display a list of aliases
$alias p='pwd ; ls -CF                          : Create a new alias 'p', which is 2 commands, followed by one another
                                                  For the alias to be saved between shells and sessions, they need to
                                                  stored in the configuration files

Use 'unalias' to remove an alias
Remember, that if an alias is set in a 
configuration file, it will be set again when
you open another shell.

disown                                          : Can be used to remove jobs from the current shell, so that when you close
                                                  the shell, the jobs will not be terminated as well.

fsck                                            : Check and repair a Linux filesystem
parted                                          : A partition manipulation program

------------------------------------------------
|            Permission explanation            |
------------------------------------------------
Permission explanation: https://youtu.be/oxuRxtrO2Ag?t=3490
Set up in relation to separate bits, from right
to left:
r = read                                        : [4] Decimal value #4, == 0x4, == 0b100
w = write                                       : [2] Decimal value #2, == 0x2, == 0b010
x = execute                                     : [1] Decimal value #1, == 0x1, == 0b001

Meaning that:
7 = read, write, execute privilege [111]
6 = read and write privilege       [110]
5 = read and execute privilege     [011]
and so on

When using the 'chmod' command, you  enter 3 numbers
The first number represents the owner
The second number represents the group
The 3rd number represents everybody else.

-rwxrwxrwx
|||||||||!------------------------------------> : Execute bit, for 'everyone'
||||||||! ------------------------------------> : Write bit, for 'everyone'
|||||||! -------------------------------------> : Read bit, for 'everyone'
||||||! --------------------------------------> : Execute bit, for 'Group'
|||||! ---------------------------------------> : Write bit, for 'Group'
||||! ----------------------------------------> : Read bit, for 'Group'
|||! -----------------------------------------> : Execute bit, for 'Owner'
||! ------------------------------------------> : Write bit, for 'Owner'
|! -------------------------------------------> : Read bit, for 'Owner'
! --------------------------------------------> : {d, 1, b, c, s, p}

With the 'ls -l' command, you can view permissions
The first permission character have multiple meanings
d                                               : Directory
1                                               : Symbolic link
b                                               : Block device
c                                               : Character device
s                                               : Socket
p                                               : Named pipe
                                                
[Example output of "ls -lG"]
drwxrwxrwx 1 declined  4096 Jul 17 14:02  Guides

------------------------------------------------
|                Process details               |
------------------------------------------------
Each process have some information related to it.
This paragraph refers to specific usage of the
'ps' and 'top' command.

This part refers primarily to the output of the
'ps' command, no version of the 'ps' command,
contain all of these, or even with the same
format or name.

ADDR                                            : Memory address of the process
C or CP                                         : CPU usage and scheduling information
USER or UID                                     : The user who the process is tied to.
%CPU                                            : How much of the CPU the process is using 
%MEM                                            : How much memory the process is using 
PID                                             : Processor ID, each process has a unique ID
PPID                                            : ID number of the process's parent process
PRI                                             : Priority of the process            
VSZ or SZ                                       : 'Virtual Memory Size'
RSS                                             : Resident Set Size, it stands for the size of the
                                                  physical memory that the process is using
STAT                                            : The process state mode, such as;
                                                  'Z' zombie,  'S' interruptible sleep,   't' stopped by debugger during tracing,
                                                  'R' running, 'D' uninterruptible sleep, 'T' stopped by job control signal,
                                                  'w' paging,  'l' is multi-threaded,     '<' high-priority (not nice)
                                                  'x' dead,    's' is a session leader,   '+' is in the foreground process group,
START or STIME                                  : At what time the process was started
TTY or TT                                       : "TeleTYpewriter", aka. the console that executed the command
COMMAND                                         : Name of the process, including arguments, if any
                                                  (COMMAND name is often abbreviated)
WCHAN                                           : Memory address of the event the process is waiting for

Moving on to the command 'top', output varies
greatly between the versions and distributions.
General information is found in the 1st row.
You can see how long the system has been up,
how many users are currently logged in to the
system, and how much demand there has been on
the system for the past 1, 5, 10 minutes.

The 'NI' column, stands for 'nice', which is a
parameter used to determine how nice a process
is towards others, it ranges from -20 to 19.
The value directly relates to how nice the
process is to others, by default the value
is '0'.

Shortcuts for 'top' is somewhat different, as
you need to press the shortcuts while the
command is running, rather than supplying it
with arguments.

These shortcuts can be used to display
information in different ways while 'top'
is actively running.
H                                               : See help options, and then press any key to return
                                                  to the top display
M                                               : To sort by memory usage instead of CPU
P                                               : To sort by CPU *(this is the standard setting)
1                                               : The number 1, toggle showing CPU usage of all your CPUs 
                                                  if you have more than one CPU on your system
R                                               : To reverse sort your output.
u                                               : And enter a username, to display processes only for a
                                                  particular user.
r                                               : Renicing a process. Type in the Process ID (PID), of the
                                                  process you wish to alter, and then when prompted, the
                                                  new nice value.
k                                               : Killing a process. Use the process ID, and then type 15
                                                  to terminate the process cleanly, or just 9 to kill the
                                                  process outright.
                                                  Note comparison, command 'kill' vs 'killall'

------------------------------------------------
|               System/User Info               |
------------------------------------------------
uname                                           : Print system information
who                                             : Show who is logged on
whoami                                          : Print effective userid
users                                           : Print the user names of users currently logged in to the current host
id                                              : ID number, and associated details with the user

date                                            : Display the date
cal                                             : Calender
        [month optional] [year]                 - month, and/or year. 
[Example]                                       :
$ cal 2021                                      : Will display the calender for the year 2021

df [OPTION]... [FILE]...                        : Report file system disk space usage
top                                             : Provides a dynamic overview of the running processes
htop                                            : Interactive process viewer
tar                                             : An archiving utility
free                                            : Displays the total amount of free space available along with the
                                                  amount of memory used and swap memory in the system, and also the
                                                  buffers used by the kernel
watch                                           : Reruns a command every 2 seconds.
        free -h                                 - Shows how much memory is in the system
jobs                                            : Display a list of jobs running in the background
                                                  The number in brackets is called 'JOBSPEC'
                                                  It indicate how to access it.

------------------------------------------------
|              User administration             |
------------------------------------------------
passwd                                          : Used to change the password of users
useradd                                         : Add a new user
groupadd
deluser                                         : Deletes user, Debian based distribution, for other types, use
                                                  "userdel" command instead.
        --remove-home [username]                - This syntax is for Debian Distributions
                                                  Will delete the user

[Example]
$ sudo deluser --remove-home derp               : Removes user 'derp'

------------------------------------------------
|              Directory commands              |
------------------------------------------------
pwd 						: Print working directory (bash command)

ls                                              : List content of current directory
        -a                                     - Display hidden files
        -l                                      - Provides extra information about each file, the left mode column regarding rw, concerns users priveledge
        -la                                     - Extra details and hidden files
        /[foldername]                           - List content of specified directory

CD                                              : Change directory
       [empty]                         - Move to home directory
        ~                                       - Move to home directory
        ..                                      - Move up a directory
        [Directory Name]/                       - Move to specific directory
        [tab]                                   - Auto complete

[Example]
$ cd ../../testfolder/                          - Move up two directories, and then down into the testfolder.
$ cd test<tab><tab>                             - Will auto complete the name of a folder starting with 'test' (if it exist)
$ ls -d */                                      - Shows directory names from within that folder.
$ ls */                                         - Show the name and content of the directories, located within the folder.


locate                                          : Able to locate specific command locations, and references
                                                  Requires a database to work. (updatedb*)
        [command]

history                                         : shows a list of commands used so far.
pushd                                           : Save directory into a LIFO stack
popd                                            : Pop the directory from the LIFO stack

mkdir                                           : Make directory (folder)
        [Directory name]                        : new directory

touch                                           : Update the date of a file, without making changes to the file
        [file name]                             : Can create a new file, if that file does not exist
                
cp                                              : Copy from specific directory into current directory
        [folder/folder/file] [New name]
        -i                                      - Add a prompt before overwriting files.

mv                                              : Move a command/file, to some other location, but we can also rename
        [Filename] [Filename]                   - rename, can also overwrite other files
        
rm                                              : Remove (PERMANENTLY)
        ?                                       - Wildcard, for a single character
        *                                       - Wildcard, will remove everything from current directory
        [a_zA_Z]*                               - Will remove everything, starting with the specified name, from current
                                                  directory.
        -r [directory]                          - will remove way too much, DO NOT USE

rmdir                                           : Remove directory
        *                                       : wildcard
        [a_zA_Z]*                               - Remove directories starting with specified [a-zA_Z]
        [directory name]                        - Remove specific directory
mkdir [options] directories                     : Creates 1 or more directories

------------------------------------------------
|                 Help section                 |
------------------------------------------------
which                                           : Will show where a command is, or whether it is installed                
        [command name]                          - Shows location of that command

whatis                                          : Brief description of a command
        [command]                               : tl;dr of that command

man [operator] [command]                        : Manual page for Bash commands
        [command]                               - Shows the manual page for that specific command
        -k                                      - Works as 'apropos', so you can search through man pages,
                                                  linked to the search word.
                                                  Each manual page, has a number, that refers to a category
                                                  To find out what the category means, look at the manual page for man
[Example]
$ man man                                       - Manual page for the manual command
$ man pipe                                      - Manual page for the pipe command
$ man -k pipe                                   - Shows a list of commands and manual pages related to 'pipe'
$ man 5 <tab><tab>                              - Double tab, to display a list of al manual pages in category 5.

apropos [operator] [command]                    : Display information about commands and things that are related to the search
                                                - Display commands related to that command

info [command]                                  : Shows information about a chosen command

Commands include a help method, referenced
[command] --help

[Examples]
$ ls --help                                     - List a help category for 'ls' command.
$ chmod --help                                  - List a help category for 'chmod' command

type [command]                                  : Display where a command is located.
        -a                                      - Display all instances of where the command is located

locate [detail]                                 : Locates a detail on the computer

compgen [Operator] [word]                       : Display possible completions depending on the operator
        -c                                      - List commands, if 'word' is supplied, list those starting with 'word'
[Example]
$ compgen -c gr                                 : List commands starting with 'gr'
$ compgen -c | sort                             : List all commands sorted alphabetically

------------------------------------------------
|           File access, edit, format          |
------------------------------------------------
VIM                                             : VIM text editor suite
        [filename]                              - Access a specific file via the VIM suite

nano                                            : text editor
        [filename]                              - opens specific file
        [empty]                                 - Open a new document in nano (unsaved version)

Additional text exditors:
gedit, jed, joe, kate, kedit, mcedit, nedit

file [option] [file]                            : Determine file type
stat                                            : Display file or file system status
     [option] [FILE]
     -f [FILE]                                  : File system status

[Example]
$ stat --printf='%n\n%a\n%b\n' [FILE]           : Prints 3 options, %n, %a, %b, with line breaks.

cat [option] [filename]                         : 'Concatenate' Show content of file via the terminal
        [Filename]                              - Display content of [Filename]
        >>        [Filename]                    - Write something into the file (append), use 'Ctrl + D' to complete.
        > [Filename]                            - overwrite the content of a file, (also create the file if needed)
        << EOF                                  - EOF End of file

more                                            : Look at a file, one page at a time using the spacebar
        [filename]                              - Open the specific file in the command prompt
        q                                       : quits, and goes back to the prompt
less                                            : Same as 'more' just goes one line at a time, you can use spacebar to jump
                                                  forward
        [filename]                              - Open the specific file in the command prompt
        q                                       - quits, and goes back to the prompt

head                                            : View the first lines of a text file

tail                                            : View the last lines of a text file

[Examples]
$ cat file1.txt | more                          : Display file1.txt in the console, using 'more' format
$ cat file1.txt | less                          : Display file1.txt in the console, using 'less' format
$ cat file1.txt | head                          : Display the first 10 lines of file1.txt in the console
$ cat file1.txt | tail                          : Display the first 10 lines of file1.txt in the console

sort                                            : Sort via parameters, alphabetically as standard -r for reversed
[Example]
$ ls -a | sort -r | less                        : List content of directory, in reversed alphabetical
                                                  order, using 'less' format.
$ cat file1.txt | more                          : Display file1.txt in the console, using 'more' format

strings                                         : Display text that's embedded in a binary file

od [option] [filename]                          : Display a file in Octal or other formats (use option '-x' for Hex)
wc [behavior] [filename]                        : Word count - count the number of words in a file
        -l                                      - Count lines, not words
wget [website link]                             : Download a file from the internet (pdf, rar, and so on)                
diff                                            : Compare files line by line

[Example]
$ diff <(wc file1) <(wc file2)                  : Compares the wordcount of 2 different files

Depending on your desktop environment, specific
commands may vary, for how to open folders
Types: Gnome, KDE, Xfce, LXDE, 

xdg-open [foldername]                           : Opens a folder, should work on a full linux distribution
$ man -k xdg                                    - Use this command to check status of xdg commands in general

------------------------------------------------
|                  NETWORKING                  |
------------------------------------------------
ssh                                             : OpenSSH remote login client
netstat                                         : Printing network connections, routing tables, interface statistics,
                                                  masquerade connections, and multicast memberships
ip                                              : ip - show/manipulate routing, network devices, interfaces and tunnels
ifconfig                                        : Configure a network interface
nmap                                            : Network exploration tool and security/port scanner
route                                           : Show/manipulate the IP routing table
wget                                            : Retrieve web pages/files to disks
ftp                                             : Copy files to/from a remote host
whois                                           : Client for the whois directory service
ssh                                             : OpenSSH remote login client, remote access to a host
iptables                                        : administration tool for IPv4/IPv6 packet filtering and NAT

------------------------------------------------
|                   VARIABLES                  |
------------------------------------------------
For a complete list of varables, use command
$ echo $<tab><tab>                              : Two tabs, for an auto complete

:These are some general useful variables.
$HOME                                           : Home directory
                                                  It is your current working directory each time you log in
                                                  or type the cd command with any option
$PATH                                           : OS variable path.
                                                  It is a colon-separated list of directories used to
                                                  find commands that you type.
$OSTYPE                                         : This name identifies the current Operating System type
$PWD                                            : Print working directory
$BASH_VERSION                                   : Represents the current bash version.
$USER                                           : Abbreviation of the username, this is a system variable

These two are used in programming
stdin                                           : Standard input (console), where the program reads from
stdout                                          : Standard output (console/screen) where the info will be displayed

------------------------------------------------
|           FUNCTIONS-(NOT COMMANDS)           |
------------------------------------------------

Navigate command history
[arrow up]                                      : Display previous command
[arrow down]                                    : Display next command

./[filename]                                    : Running an executable file (compiled file)

$[expression]                                   : Arithmetic expression, direct
$(expression)                                   : Arithmetic expression, via function

[Example]
$ echo "Derp $[56 - 43]"                        : Echoes "Derp 13" in the console
$ echo "Derp $(ls | wc -w)"                     : The content of ls is piped to word count command that prints
                                                  the number of words in the folder

|                                               : Pipeline character, Special circumstance(!!!)
<('content')                                    : A method to condense the input, and use it as an argument

[Example]
$ history | less                                : Will show the history using the 'less' format
$ diff <(wc file1) <(wc file2)                  : Compare at the difference between the word count of 2 files


[Wildcard types:]
*                                               : Used as a wildcard for an string of undetermined length
?                                               : Used a wildcard for a single character in strings.
[...]                                           : Matches any one of the characters between the brackets, which can
                                                  include a hyphen separated range of letters or numbers.
                                                  Used for pattern matching, case sensitive.
{...}                                           : Pattern generation, strings are separated by comma, numbers by 2 dots (..)
[set]                                           : Any single character in the given set, most commonly a sequence of characters,
                                                  like [aeiouAEIOU] for all vowels, or a range with a dash, like [A-Z] for all
                                                  capital letters.
[^set]                                          : Any single character NOT in the given set, such as [^0-9] to exclude any
                                                  digits.
[!set]                                          : Same as [^set]

[Examples]
$ touch derp{1..4}                              : Creates 4 files, derp1, derp2, derp3, derp4
$ touch derp{ty,ti}                             : Creates 2 files names derpty and derpti
$ rm derp*                                      : Remove all files starting with the name "derp"
$ ls [0A]*                                      : List all files starting with 0 or A
$ ls ?[2A]*                                     : List all files where the 2nd character is either '2' or 'A'

;                                               : Combining commands to be run in a sequence
&&                                              : Run a sequence of commands, but stop execution if any of them fails,
||                                              : Run a sequence of commands, but stop when the first command is true

[Examples]
$ command1 && command2 && command3 
$ cd .. ; cd folder1/                           : Move up 1 directory, then move back down into another directory
$ apt-get update || echo "Derped out"           : Without root access, this will derp out.

!!                                              : Rerun previous command
!*                                              : Last parameter from previous command
!?[string]?                                     : Reruns a previous command, containing the [string]


[Examples]
$ !?cal?                                        : Reruns a previous command containing 'cal' if found
$ sudo !!                                       : Redo last command as root user
$ ls z* && rm !*                                : Here '!*' is treated as 'z*', so first we list all files starting with z,
                                                  Then delete those files

clear                                           : Clears the bash terminal of text
exit                                            : Terminates current access (Super User, bash, cmd, ...)
logout                                          : Logs out, but recommended to use 'exit' instead.
--                                              : "end of options", meaning that anything shown after that option will be
                                                  disregarded.

>> [filename]                                   : Append into the file (add at the end of the file)
> [filename]                                    : Save content into file
<                                               : Directs the standard output of a command to a file. If the file exists,
                                                  the content of that file is overwritten
2>                                              : Directs standard error(error messages) to the file.
&>                                              : Directs both standard output and standard error to the file

[Examples]
$ ./derp >> derpy.txt                           - Will send the content from the compiled program (derp) to be
                                                  appended in the file 'derpy.txt' rather than shown on the console.
$ ./derp > derpy.txt                            - Will send the content from the compiled program (derp) to 
                                                  overwrite content of file 'derpy.txt' rather than shown on the console.

------------------------------------------------
|            Command line shortcuts            |
------------------------------------------------
How to navigate the command console
Mostly useful commands pasted first
Rest unsorted.

[ctrl + C]                                      : Kills a command, if a command is continuously running (example: htop)
[ctrl + D]                                      : Terminate command
[ctrl + A]                                      : Beginning of line, go to the beginning of the current line
[ctrl + E]                                      : End of line, go to the end of the line

[ctrl + L]                                      : Clears the bash terminal of text
[ctrl + K]                                      : Cut end of line, cut text to the end of the line
[ctrl + U]                                      : Cut beginning of line, cut text to the beginning of the line.

[ctrl + F]                                      : Character forward, go forward one character.
[ctrl + B]                                      : Character backward, aka. go backward one character.
[ctrl + D]                                      : Delete the current character (aka 'delete' key)
[ctrl + T]                                      : Transpose words, switch positions of current and previous characters
[ctrl + V]                                      : Insert special character, add a special character.
                                                - For example, to add a Tab character, press [Ctrl+V+Tab]
[ctrl + W]                                      : Cut previous word, cut the word located behind the cursor.
[ctrl + Y]                                      : Paste recent text, paste most recently cut text.
[alt + Y]                                       : Paste earlier text, rotate back to previously cut text and paste it.


[alt + F]                                       : Word forward, go forward one word
[alt + B]                                       : Word backward, go backward one word
[alt + T]                                       : Transpose words, switch positions of current and previous character
[alt + U]                                       : Uppercase word, change the current word to upper case
[alt + L]                                       : Lowercase word, change the current word to lower case        
[alt + C]                                       : Change the current word to an initial capital
[alt + D]                                       : Cut the word following the cursor

------------------------------------------------
|                   HARDWARE                   |
------------------------------------------------
Managing the hardware details, such as removable
USB drives, hardware plugged in during boot, 
and more.
lshw                                            : List hardware (warning, should be run as a super user)
dmesg                                           : Print or control the kernel ring buffers
                                                  Used to view or alter which hardware was detected and which
                                                  drivers were loaded by the kernel at boot time.
journalctl                                      : Query the systemd journal
                                                  Can be used to view boot messages, and show messages
                                                  messages associated with a particular boot instance.
lspci                                           : List all PCI devices
lsusb                                           : List all USB devices
lscpu                                           : List all PCU devices
lsmod                                           : Show the status of modules in the Linux kernel
modinfo                                         : Show information about a Linux Kernel module
rmmod                                           : Simple program to remove a module from the linux Kernel
modprobe                                        : Add and remove modules from the Linux Kernel

------------------------------------------------
|                 VIM tutorial                 |
------------------------------------------------
'Vi' is often the default text editor for Linux,
VIM is the upgraded version, and an editor of
choice for many.
It is a "modal" text editor, meaning that it has
different modes available, such as:
command(default), insert, last-line, and 
possibly more, depending on whom you ask.

In command mode, you have access to very
different tools, such as saving, exiting, 
highlighting, and so on,
Whereas 'insert'-mode is about editing the 
content of the file directly.

If you're in 'insert'-mode, hit the ESC
key, to go to the Command mode.

Obviously arrow keys work the same.

These are some of the most common
shortcuts that you are going to need.

Shortcuts:
Command-mode                                     Description
------------------------------------------------|---------------
i                                               : Switch to 'Insert' mode.
[CTLR + V]                                      : Highlight 1 column at a time
v                                               : Highlight one character at a time
:q                                              : Quit the file (adds a prompt if changes were made to the file)
:q!                                             : Force quit the file
:wq                                             : Save and quit
p                                               : paste text after the current line
                                                : paste text on the current line
y                                               : Yank text into the copy buffer 
u                                               : Undo
[CTRL + r]                                      : Undo an undo (redoing your last undo)
?text                                           : Search for 'text', then use '/' to move forward, and '?' to move backward.

Character movement                               Description
------------------------------------------------|---------------
h                                               : Moves the cursor one character to the left.
j                                               : Moves the cursor down one line.
k                                               : Moves the cursor up one line.
l                                               : Moves the cursor one character to ther right.
0                                               : Moves the cursor to the beginning of the line.
$                                               : Moves the cursor to the end of the line.
w                                               : Move forward one word.
b                                               : Move backward one word.
G                                               : Move to the end of the file.
gg                                              : Move to the beginning of the file
`.                                              : Move to the last edit.

Some of these commands can be 'prefaced',
meaning that if you use the command 10b, you
move back 10 words. Or if you use 11w move
forward 11 words.

------------------------------------------------
|                 Uncategorized                |
------------------------------------------------
sudo apt install <deb name>                     : Install additional packages, such as 'nmap'

mkfifo pipeline                                 : Make fifo pipeline        

awk                                             : Awk is a scripting language used for manipulating data and
                                                  generating reports. By itself it goes beyond the scope of
                                                  this file, and would thus require a guide by itself, even
                                                  if the topic is relatively lightweight.
make                                            : GNU make utility to maintain groups of programs
                                                  Requires additional knowledge to setup for projects via makefile
rm .test.c.sw*                                  : Sletter begge sw filer for 'test.c' (i tilfælde af fejl)
                                                  //compiler kurset
pipe                                            : Pipe functionality, used within  C programs
./[filename]                                    : running an executable file (compiled file)
grep [search pattern]                           : Print lines that match patterns
chage                                           : Change user password expiry information

[Example]
Details for accessing the LSF 10 cluster on DTU
via a linux terminal
http://www.cc.dtu.dk/?page_id=2501
[Example]
$  ssh userid@login1.gbar.dtu.dk                : Substitute userid with your student ID.
                                                - Type in your password, and you should now have acess to the LSF 10 cluster                                                
                                                - Hit [CTRL + C] if you screw up
If necessary, use this command to access a
new node.
$ linuxsh                                                 
Use cd, pwd, ls -l commands, to navigate to
the desired folder.

-----------------------------------------------------------------------------
|                               Sources                                     |
-----------------------------------------------------------------------------
Sources:
- 62588 Operating Systems Lectures
- https://www.youtube.com/watch?v=oxuRxtrO2Ag
- Linux Pocket guide
- Linux Bible by Christopher Negus (Once you get past the fluff, it's ok)
- https://en.wikipedia.org/wiki/Linux_distribution
- https://en.wikipedia.org/wiki/List_of_Linux_distributions
- https://www.howtogeek.com/656549/how-to-delete-a-user-on-linux-and-remove-every-trace/
- https://acloudguru.com/blog/engineering/conditions-in-bash-scripting-if-statements
- https://www.geeksforgeeks.org/awk-command-unixlinux-examples/                 : AWK 
- https://man7.org/linux/man-pages/man1/ps.1.html                               : Man page for ps
- https://www.computerhope.com/unix/visudo.htm                                  : Editing using the visudo command
- https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/                 : Makefile explanation, by extension, the next
                                                                                 link as well.
- http://www.gnu.org/software/make/manual/make.html
- https://www.linux.com/training-tutorials/vim-101-beginners-guide-vim/         : VIM tutorial
- https://vim.rtorr.com/                                                        : VIM shortcuts

/*============================================================================
        Advanced topics : Creating your own shell environment
                          -  Creating your own shell environment
                          -  Setting your prompt
                          -  Adding environment variables
                          -  Background processes
                          -  Managing groups
                          -  Shell scripting
                        : Table list
                          -  Table 1.1: Bash Configuration files 
                          -  Table 1.2: Characters to add information to bash prompt
                          -  Table 1.3: Manual page sections
                          -  Table 1.4: (Some of) Linux directory information
                          -  Table 1.5: Signals available in Linux
                          -  Table 1.6: Control group limiting options
                          -  Table 1.7: Operators for test expressions(Shell scripting)
 ============================================================================*/

------------------------------------------------
|            Configuring your shell            |
------------------------------------------------

You can tune your shell to help you work more
efficiently. You can set aliases to create
shortcuts to your favorite command lines and
environment variables to stoe bits of
information. By adding those settings to shell
configuration files, you can have the settings
available every time you open a shell.

* Configuring your shell
Several configuration files support how your
shell behaves. Some of the files are executed
for every user and every shell, whereas others
are specific to the user who creates the
configuration file.

Table list 1.1 shows the files that are of
interest to anyone using the bash shell in
Linux. (Notice the use of ~ in the filenames to
indicate that the file is located in each user's
home directory.) To change the /etc/profile or
/etc/bashrc files, you must be the root user.
It is better to create an
/etc/profile.d/custom.sh file to add system/wide
settings instead of editing those files directly,
however. Users can change the information in the
$HOME/.bash_profile, $HOME/.bashrc, and
$HOME/.bash_logout files in their own home
directories.

[Example 1]
To edit the environment, we want to alter the
configuration file $HOME/.bashrc, as a plaintext
file via 'nano', we use the command
$ nano $HOME/./bashrc
To to the bottom and include an extra line
alias derp='watch free -h
To save the file press [CTRL + O]
To exit the file press [CTRL + X]
A new alias has now been set, to access the
command without having to restart the console
use this command $ source $HOME/.bashrc
Alternatively, restart the console.

------------------------------------------------
|              Setting your prompt             |
------------------------------------------------
Your prompt consists of a set of characters that
appear each time the shell is ready to accept a
command.
The PS1 environment variable  sets what the
prompt contains and is what you will interact
with most of the time. If your shell requires
additional input, it uses the values of PS2,
PS3, and PS4.

When your Linux system is installed, often a
prompt is set to contain more than just a dollar
sign or pound sign. For example in Fedora or Red
Hat Enterprise Linux, your prompt is set to
include the following information: your
username, your hostname, and the base name of
your current working directory. That information
is surrounded by and followed by a dollar sign
(for regular users) or a pound sign (for the
root user). 

The following is an example of that prompt:
[declined@LAPTOP-E9IBLV7O: bin] $

If you change directories, the bin name would
change to the name of the new directory.
Likewise, if you were to log in as a different
user or to a different host,  that information
would change.

You can use several special characters
(indicated by adding a backslash to a variety
of letters) to include different information
in your prompt. Special characters can be
used to output your Terminal number the
date, and the time as well as other pieces
of information. Table 1.2 show some examples of
characters to add information to Bash prompt.
For additional info, see the bash man page.

To make a change to your prompt permanent, add
the value of PS1 to your .bashrc file in your
home directory (assuming that you are using
the bash shell). There may already be a PS1
value in that file, which you can modify.
Link in refereces with a HOWTO for changing
colors commands and other features of your
bash shell prompt.

[Example 2]
Alter the PS1 variable, remember to store it
first, and know that it is only valid until
you restart the shell.
$ temp=$PS1
[For debian]
$ PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
[For RHEL]
$ PS1='\e[33;1m\u@\h: \e[31m\w\e[0m\$ '

You can restart the shell with the command:
$ exec bash

------------------------------------------------
|         Adding environment variables         |
------------------------------------------------
You might want to consider adding a few 
environment variables to your .bashrv file.
These can help make working with the shell more
efficient and effective:

[TMOUT]
This sets how lnog the shell can be inactive
before bash automatically exits. The value is
the number of seconds for which the shell has
not received input. This can be a nice security
feature, in case you leave your desk while you
are still logged in to Linux. To prevent being
logged off while you are working, you may want
to set the value to something like TMOUT=1800
(30 minutes). You can use any Terminal session
to close the current shell after a set number
of seconds, for example, TMOUT=30.

[PATH]
As described earlier, the PATH variable sets
the directories that are searched for the the
commands that you use. If you often use
directories of commands that are not in your
path, you can permanently add them. >To do this,
add a PATH variable to your .bashrc file.
For example, to add a directory called
/herpderp/bin, add the following:

PATH=$PATH:/herpderp/bin ; export PATH

This example first reads all of the current
path directories into the new PATH ($PATH),
adds the /herpderp/bin directory, and then
exports the new PATH.

[User defined]
You can create your own environment variables
to provide shortcuts in your work. Choose any
name that is not being used and assign a useful
value to it. For example, if you do lots of
work with files in the /workspace/project1
directory, you could set the following variable:

DERP=/workspace/project1 ; export DERP

You could make that your current directory with
the command:
$ cd $DERP
You could run a program from that directory
called derpina with the comand:
$ $DERP/derpina
You could edit a file from there called troll
with the command:
$ vi $DERP/troll

------------------------------------------------
|             Background processes             |
------------------------------------------------
Processes can be run in the background or
foreground.

Foreground jobs are ones that don’t return you
to the command prompt until you exit out of the
job or the job finishes.
Background jobs run exactly the as if it were
in the foreground, except that it does not 
receive user input, and output is still
processed accordingly.
There is technically a 3rd type, 'stopped'.
They do not receive user input, and do not
produce an output.
They don't do anything, and will continue
not doing anything until they're resumed or
killed.

Be aware that background processes can still
output something, despite running in the
background, so you can redraw the screen
with [CTRL + L].

To see a list of processes running in the
background use the command 'jobs'.
To access specific jobs, use the '%'
percentage sign, followed by the number.

Accessing background jobs:
%JOB_SPEC                                       : Refers to a specific job.
%                                               : Refers to the most recent command put into the background
                                                  (indicated by the plus sign when you type the jobs command).
                                                  This action brings the command to the foreground
%string                                         : Refers to a job where the command begins with a particular
                                                  string of characters. The string must be unambiguous. (there
                                                  mustn't be multiple commands starting wit the same string)
%?string                                        : Refers to a job where the command line contains a string at
                                                  any point. The string must be unambiguous or the match fails.
%--                                             : Refers to the job stopped before the one most recently stopped

There  are 3 primary ways (that I know of) to
send jobs to the background.
[CTRL + Z]                                      : Send a SIGTSTP signal, forcing the job to the background
$ bg                                            : Move jobs to the background. 
                                                  Place the jobs identified by each JOB_SPEC in the background,
                                                  as if they had been started with `&'.  If JOB_SPEC is not
                                                  present, the shell's notion of the current job is used.
Add an ampersand '&' at the end of a command    : Automatically sends the process to the background when
                                                  the process is created, and then display 2 numbers, first
                                                  number is the JOB_SPEC, the second number is the Processor
                                                  ID (PID).


Use the commands 'fg' and 'bg' to manage/access
the processes, and commands like 'kill' to 
terminate, remember to use %JOB_SPEC to access 
the specific process directly.

[Examples]
$ watch free -h & 
$ htop [CTRL + Z]
$ jobs -l

Now we can use the command 'fg' to bring a process
to the foreground, kill it or something else.
$ kill -9 %1
$ fg %2
$ [CTRL + C]
$ jobs

If the 1st processed that we killed exists try
to access it with the command
$ fg %1

------------------------------------------------
|                Managing groups               |
------------------------------------------------
If you're new to Linux, never ever try managing
creating, or working with groups for a very
simple reason.

It can cause your computer to become unbootable

Table 1.6 lists a number of options that can
be used to manage groups.

------------------------------------------------
|                Shell scripting               |
------------------------------------------------
Shell scripting are primarily used for task
automation. It is capable of executing multiple
commands, take input, customizing administrative
tasks and so on.

There are 2 ways to execute shell scripts.
By using the 'bash' command, or running the file
as an executable.

[Example]
$ bash test.sh
$ ./test.sh

This link explains a lot of the syntax involved
https://linuxhint.com/30_bash_scPS1ript_examples/

The 1st line of a shell script should be:
#!/bin/bash

It's possible to create variables. Variable
names are case sensitive. 
Variables can contain a number of things such as
numeric, strings, output of functions, and so on.
To create them, there must NOT be a space between
the variable name, and the content. For
functions, use a dollar sign, then parenthesis.
A single hashtag (#) is used as a single line
comment.

[Examples]
VAR1=6465.7270
VAR2="derp"
VAR3=$(date)

Some characters have special meaning in the shell
'enclosedwithin'                                : ' ', literal translation of content within brackets
\followingcharacter                             : Backslash, literal translation of the following character
"STRING"                                        : Content within "" is parsed as a string, variables are
                                                  still considered as such.
$STRING                                         : Name of a variable.

Commonly used parameter expansions in bash
shell scripting:
${var:-value}                                   : If variable is unset or empty expand this to value.
${var#pattern}                                  : Chop the shortest match for pattern from the front of var's value.
${var##pattern}                                 : Chop the longest match for pattern from the front of var's value.
${var%pattern}                                  : Chop the shortest match for pattern from the end of var's value.
${var%%pattern}                                 : Chop the longest match for pattern from the end of var's value.

[Examples]                                      : Try these to see the output.
$ THIS="This is an example"
$ THIS=${THIS:-"Not set"}
$ THAT=${THAT:-"Not set"}
$ echo $THIS
This is an example
$ echo $THAT
Not set

Syntax for 'if', 'else if', 'then', 'then', can
be setup using this format:
if  [argument] ; then                           : If argument is true, then do....
...
elif [argument]                                 : 'Else if'-statement
...
else                                            : 'Else'-statement
...
fi                                              : indicates the end of the 'if'-statement.

[Example]                                       : Operators found in table 1.7
filename="$HOME"
if [ -f "$filename" ] ; then
   echo "$filename is a regular file"
elif [ -d "$filename" ]
   echo "$filename is a directory"
else
   echo "No clue what $filename is."
fi

There is also a shorthand method for an 
if-statement with a single command.
[statement] || [command]                        : If statement fails run [command]
[statement] && [command]                        : If statement succeed run [command]


The 'case' command, otherwise known as a switch,
')' is used for different cases, and '*)' is
used as a default (catchall) case.
'|' is used as an 'OR' bitwise operator.
'esac' is used to end the switch.
The argument can be a number of things including
but not limited to {variable, command, string}
Syntax is:
case [argument] in
';;' is used to end each case.

--------------------[Example]-------------------
# Here we're using the date command 'day' output.
#!/bin/bash
case $(date +%a) in
    "Mon" | "Wed")
        echo "Day is uneven"
        ;;
    "Tue" | "Thu")
        echo "Day is even"
        ;;
    "Fri")
        echo "Almost weekend"
        ;;
    *)
        echo "Either it's weekend, or I screwed up"
        ;;
esac
----------------------[END]---------------------

Loop types.
There are 3 loop types 'for', 'while', 'until'.
Syntax are:

for [variable] in [LIST]
do
   ...
done

while [condition]
do
   ...
done

until [condition]
do
   ...
done


------------------------------------------------
|                  Table: 1.1                  |
------------------------------------------------
File                                             Description
------------------------------------------------|---------------
/etc/profile                                    : This sets up user environment information for every user.
                                                - It is executed when you first log in. This file provides
                                                  values for your path in addition to setting environment
                                                  variables for such things as the location of your mailbox
                                                  and the size of your history files. Finally /etc/profile
                                                  gathers shell settings from configuration files in the
                                                  /etc/profile.d directory.
/etc/bashrc                                     : This executes for every user who runs the bash shell each
                                                  time a bash shell is opened. It sets the default prompt
                                                  and may add one or more aliases. Values in this file can
                                                  be overridden by information in each user's ~/.bashrc file.
~/.bash_profile                                 : This is used by each user to enter information that is
                                                  specific to his or her use of the shell. It is executed
                                                  only once (when the user logs in). By default, it sets
                                                  a few environment variables and executes the users's
                                                  .bashrc file. This is a good place to add environment
                                                  variables because, once set, the are inherited by future
                                                  shells.
~/.bashrc                                       : This contains the inforamtion that is speific to your bash
                                                  shells. It is read when you log in and also each time you
                                                  open a new bash shell. This is the best location to add
                                                  aliases so that your shell picks them up.
~/.bash_logout                                  : This executes each time you log out. (exit the last bash
                                                  shell)
                                                  
------------------------------------------------
|                  Table: 1.2                  |
------------------------------------------------
Special character                                Description
------------------------------------------------|---------------
                                                
\!                                              : This shows the current command history number. This includes
                                                  all previuos commands stored for your username.
\#                                              : This shows the command number of the current command.
                                                  This includes only the commands for the active shell.
\$                                              : This shows the user prompt ($) or root prompt (#), depending
                                                  on which type of user you are.
\w                                              : This shows only the current working directory base name.
                                                  For example if the current working directory was
                                                  /var/spool/mail, this value simply appears as mail.
\[                                              : This precedes a sequence of nonprinting characters.
                                                  This can be used to add a Terminal control sequence into
                                                  the prompt for such things as changing colors, adding blink
                                                  effects, or making characters bold. (Your Terminal determines
                                                  the exact sequences available)
\]                                              : This follows a sequence of nonprinting characters.
\\                                              : This shows as backslash
\d                                              : This displays the day name, month, and day number of the
                                                  current date, for example, Wed Jul 21
\h                                              : This shows the hostname of the computer running the shell.
\n                                              : This causes a newline to occur.
\nnn                                            : This shows the character that relates to the octal number
                                                  replacing nnn.
\s                                              : This diplays the current shell name. For the bash shell,
                                                  the value would be bash.
\t                                              : This prints the current time in hours, minutes and seconds,
                                                  example 10:30:30
\u                                              : This prints your current username
\w                                              : This displays the full path to the current working directory

------------------------------------------------
|                  Table: 1.3                  |
------------------------------------------------

Number  Type                                     Description
-------|----------------------------------------|---------------
1       User Commands                           : Executable programs or shell commands
                                                  Commands that can be run from the shell by a regular user
                                                  (typically no administrative privilege is needed)
2       System Calls                            : Functions provided by the kernel
                                                  Programming functions used within an application
                                                  to make calls to the kernel
3       C library functions                     : Library calls (functions within program libraries)
                                                  Programming functions that provide interface to specific
                                                  programming libraries (such as those for certain graphical
                                                  interfaces or other libraries that operate in user space)
4       Devices and special files               : Special files (usually found in /dev)
                                                  Filesystem nods that represent hardware devices (such as
                                                  Terminals or CD drives) or software devices (such as
                                                  random number generators)
5       File formats and conventions            : Types of files (such as a graphics or word proessing file)
        e.g. /etc/passwd                          or specific configuration files (such as the passwd or group file)
6       Games                                   : Games available on the system
7       Miscellaneous                           : Including macro packages and conventions, e.g. man(7), groff(7)
                                                  Overviews of topics such as protocols, filesystems, character
                                                  set standards, and so on
8       System administration commands          : Commands that require root or other administrative privileges to use
        - Tools and Daemons
9       Kernel routines                         : Non standard

------------------------------------------------
|                  Table: 1.4                  |
------------------------------------------------

Directory                                        Description
------------------------------------------------|---------------
/bin                                            : Contains common Linux user commands, such as ls, sort, date and chmod
/boot                                           : Has the bootable Linux kernel, initiam RAM disk, and boot loader
                                                  configuration files (GRUB)
/dev                                            : Contains files representing access points to devices on your system.
                                                  These include terminal devices (tty*), hard disks (hd* or sd*), RAM
                                                  (ram*), and CD-ROM (cd*). Users can access these devices directly
                                                  through these device files; however applications often hide the actual
                                                  device names to end users.
/etc                                            : Contains administrative configuration files. Most fo these files are
                                                  plain-text files that, given the user has proper permission, can be
                                                  edited with any text editor
/home                                           : Contains directories assigned to each regular user with a login account.
                                                  (The root user is an exception, using /root as his or her home directory.)
/media                                          : Provides a standard location for automounting devices (removable media in
                                                  particular). If the medium has a volume name, that name is typically used
                                                  as the mount point. For example, a USB drive with a volume name of myusb
                                                  would be mounted on /media/myusb
/lib                                            : Contains shred libraries needed by applicatiosn in /bin and /sbin to
                                                  boot systems.
/mnt                                            : A common mount point for many devices before it was supplanted by the 
                                                  standard /media directory. Some bootable Linux systems still use this
                                                  directory to mount hard disk partitions and remote filesystems.
                                                  Many people still use this directory to temporarily mount local or remote
                                                  filesystems, which are not mountned permanently.
/misc                                           : A directory sometimes used to automount filesystem upon request
/opt                                            : Directory structure available to store add-on application software.
/proc                                           : Contains information about system resources
/root                                           : Represents the root user's home diretory. The home directory for root
                                                  does not reside beneath /home for seurity reasons.
/sbin                                           : Contains administrative commands and daemon processes
/sys                                            : Contains parameters for such things as tuning block storage and managing
                                                  cgroups.
/tmp                                            : Contains temporary files used by applications.
/usr                                            : Contains user documentation, games, graphicalfiles (X11), libraries (lib),
                                                  and a variety of other commands and files that are not needed during the
                                                  boot process. The /usr directory is meant for files that don't change
                                                  after installation (in theory, /usr could be mounted read-only).
/var                                            : Contains directories of data used by various applications. In particular,
                                                  this is where you would place files that you share as an FTP server
                                                  (/var/ftp) or a web server (/var/www). It also contains all system log
                                                  files (/var/log) and spool files in /var/spool (such as mail, cups, and
                                                  news). The /var directory contains directories and files that are meant
                                                  to change often. On server computers, it is common to create the /var
                                                  directory as a separate filesystem, using a filesystem that that can be
                                                  easily expanded.

------------------------------------------------
|                  Table: 1.5                  |
------------------------------------------------
Use this command, to see a list of supported
signals on your system:
$ kill -l
Signal          Number                           Description
---------------|--------------------------------|---------------
SIGHUP           1                              : Hang-up detected on controlling terminal or death of
                                                  controlling process.
SIGINT           2                              : Interrupt from keyboard.¨
SIGQUIT          3                              : Quit from keyboard.
SIGILL           4                              : 
SIGTRAP          5                              :
SIGABRT          6                              : Abort signal from abort(3)
SIGBUS           7                              : 
SIGFPE           8                              : 
SIGKILL          9                              : Kill signal.
SIGUSR1         10                              : 
SIGSEGV         11                              : 
SIGUSR2         12                              :
SIGPIPE         13                              : 
SIGALRM         14                              : 
SIGTERM         15                              : Termination signal
SIGSTKFLT       16                              : 
SIGSTOP         17,(19,23)                      : The SIGSTOP signal stops the process. It cannot be handled,
                                                  ignored, or blocked.
SIGCONT         18,(19,25)                      : Continue if stopped
SIGSTOP         19                              : 
SIGTSTP         20                              : An interactive stop signal. Unlike SIGSTOP, this signal can
                                                  be handled and ignored. 
SIGTTIN         21                              : 
SIGTTOU         22                              :
SIGURG          23                              :
SIGXCPU         24                              :
SIGXFSZ         25                              :
SIGVTALRM       26                              :
SIGPROF         27                              :
SIGWINCH        28                              :
SIGIO           29                              :
SIGPWR          30                              :
SIGSYS          31                              :
SIGRTMIN        34                              :
SIGRTMIN+1      35                              :
SIGRTMIN+2      36                              :
SIGRTMIN+3      37                              :
SIGRTMIN+4      38                              :
SIGRTMIN+5      39                              :
SIGRTMIN+6      40                              :
SIGRTMIN+7      41                              :
SIGRTMIN+8      42                              :
SIGRTMIN+9      43                              :
SIGRTMIN+10     44                              :
SIGRTMIN+11     45                              :
SIGRTMIN+12     46                              :
SIGRTMIN+13     47                              :
SIGRTMIN+14     48                              :
SIGRTMIN+15     49                              :
SIGRTMAX-14     50                              :
SIGRTMAX-13     51                              :
SIGRTMAX-12     52                              :
SIGRTMAX-11     53                              :
SIGRTMAX-10     54                              :
SIGRTMAX-9      55                              :
SIGRTMAX-8      56                              :
SIGRTMAX-7      57                              :
SIGRTMAX-6      58                              :
SIGRTMAX-5      59                              :
SIGRTMAX-4      60                              :
SIGRTMAX-3      61                              :
SIGRTMAX-2      62                              :
SIGRTMAX-1      63                              :
SIGRTMAX        64                              :

------------------------------------------------
|                  Table: 1.6                  |
------------------------------------------------
Topics                                           Description
------------------------------------------------|---------------
Storage (blkio)                                 : Limits total input and output access to storage devices (such as hard
                                                  disks, USB drives, and so on)
Processor scheduling (cpu)                      : Assigns the amount of access a cgroup has to be scheduled for
                                                  processing power.
Process accounting (cpuacct)                    : Reports on CPU usage. This information can be leveraged to charge
                                                  clients for the amount of processing power they use.
CPU assignment (cpuset)                         : On systems with multiple CPU cores, assigns a task to a particular set
                                                  of processors and assiciated memory.
Device access (devices)                         : Allows tasks in a cgroup to open or create (mknod) selected device
                                                  types.
Suspend/resume (freezer)                        : Suspends and resumes cgroup tasks
Memory usage (memory)                           : Limits memory usage by task. It also creates reports on memory
                                                  resources used.
Network bandwidth (net_cls)                     : Limits network access to selected cgroup tasks. This is done by
                                                  tagging network packets to identify the cgroup task that originated
                                                  the packet and having the Linux traffic controller monitor and restrict
                                                  packets coming from each group.
Network traffic (net_prio)                      : Sets priorities of network traffic coming from selected cgroups and
                                                  lets administrators change these priorites on the fly.
Name spaces (ns)                                : Separates cgroups into namespaces, so processes in one cgroup can only
                                                  see the namespaces associated with the cgroup. Namespaces can include
                                                  separate process tables, mount tables, and network interfaces.

------------------------------------------------
|                  Table: 1.7                  |
------------------------------------------------
Shell scripting if/else statements operators.
These can be found using the bash command:
$ help test
Operator                                         What is being tested
------------------------------------------------|---------------
-a file                                         : Does the file exist?
-b file                                         : Is the file a block special device?
-c file                                         : Is the file character special (For example, a character device)? Used to
                                                  identify serial lines and terminal devices.
-d file                                         : Is the file a directory?
-e file                                         : Does the file exist? (same as -a)
-f file                                         : Does the file exist, and is it a regular file (for example), not a directory,
                                                  socket, pipe, link, or device file?
-g file                                         : Does the file have the set group id (SGID) bit set?
-h file                                         : Is the file a symbolic link? (Same as -L)
-k file                                         : Does the file have the sticky bit set?
-L file                                         : Is the file a symbolic link?
-n string                                       : Is the length of the string greater than 0 bytes?
-O file                                         : Do you own the file?
-p file                                         : Is the file a named pipe?
-r file                                         : Is the file readably by you?
-s file                                         : Does the file exist, and is it larger than 0 bytes?
-S file                                         : Does the file exist, and is it a socket?
-t fd                                           : Is the file descriptor connected to a terminal?
-u file                                         : Does the file have the set user id(SUID) bit set?
-w file                                         : Is the file writable by you?
-x file                                         : Is the file executable by you?
-z string                                       : Is the length of the string 0 (zero) bytes?
expr1 -a expr2                                  : Are both the first expression and the second expression true?
expr1 -o expr2                                  : Is either of the two expressions true?
file1 -nt file2                                 : Is the first file newer than the second file (using the modification time
                                                  stamp)?
file1 -ot file2                                 : Is the first file older than the second file (using the modification time
                                                  stamp)?
file1 -ef file2                                 : Are the two files associated by a link (a hard link or a symbolic link)?
var1 = var2                                     : Is the first variable equal to the second variable?
var1 -eq var2                                   : Is the first variable equal to the second variable?
var1 -ge var2                                   : Is the first variable greater than or equal to the second variable?
var1 -gt var2                                   : Is the first variable greater than the second variable?
var1 -le var2                                   : Is the first variable less than the second variable?
var1 -lt var2                                   : Is the first variable not equal to the second variable?
var1 != var2                                    : Is the first variable not equal to the second variable?
var1 -ne var2                                   : Is the firat variable not equal to the second variable?

------------------------------------------------
|                  References                  |
------------------------------------------------

http://www.tlpd.org/HOWTO/Bash-Prompt-HOWTO     : Refer to this link for information on changing colors, commands and other
                                                  features of your bash shell prompt
https://chrisjean.com/multitasking-from-the-linux-command-line-plus-process-prioritization/
                                                : Background, foreground, job priority
https://linuxhint.com/30_bash_script_examples/  : Bash scripting
https://github.com/vossenjp/bashcookbook-examples
                                                : Github repository of some shell scripts (although a lot of them are poorly
                                                  explained)